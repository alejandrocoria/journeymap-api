buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.0.7'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'

ext {
    srcWebDir = "src/main/resources/assets/journeymap/web/"
    implSrc = "build/resources/java/journeymap/feature/impl/"
    sharedManifest = manifest {
        attributes = [
                "Implementation-Title": "JourneyMap",
                "Implementation-Version": project.version,
                "Implementation-URL"  : "http://journeymap.info"
        ]
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7
version = "${project.minecraft_version}-${project.jm_major}.${project.jm_minor}.${project.jm_micro}${project.jm_patch}"
group = project.group_id
archivesBaseName = project.mod_id

repositories {
    // JourneyMap API releases are here
    mavenCentral()

    // JourneyMap API snapshots are here
    maven { url 'https://oss.sonatype.org/content/groups/public/' }
}

configurations.all {
    // Check for snapshots more frequently than Gradle's default of 1 day. 0 = every build.
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

configurations {
    // custom config of jars that will be included in the journeymap jar
    includeInJar
}

dependencies {
    compile group: "info.journeymap", name: "journeymap-api", version: project.journeymap_api_version, changing: true
    //runtime group: "info.journeymap", name: "journeymap-api", version: project.journeymap_api_version, classifier: "examplemod", changing: true
    runtime group: 'com.yahoo.platform.yui', name: 'yuicompressor', version: '2.4.8'
    testCompile 'junit:junit:4.12'
    includeInJar "info.journeymap:journeymap-api:" + project.journeymap_api_version
}

manifest {
    attributes 'FMLAT': 'journeymap_at.cfg'
}

minecraft {
    version = "${project.minecraft_version}-${project.forge_version}"
    mappings = project.mappings
    runDir = "run"
    makeObfSourceJar = false

    replace "@JMVERSION@", project.version
    replace "@MCVERSION@", project.minecraft_version
    replace "@FORGEVERSION@", project.forge_version
    replace "@MAJOR@", project.jm_major
    replace "@MINOR@", project.jm_minor
    replace "@MICRO@", project.jm_micro
    replace "@PATCH@", project.jm_patch
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'license.txt','mcmod.info'
        expand 'version': project.version,
                'date': getDate(),
                'mcversion': project.minecraft.version,
                'forgeversion': project.forge_version,
                'jmedition': project.unlimited,
                'apiversion': project.journeymap_api_version
    }
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'license.txt'
    }
}

task copyJs(type: Copy) {
    from 'tmp'
    into 'build/resources/main/assets/journeymap/web/css'
    include 'journeymap.css'
}

task copyCss(type: Copy, dependsOn: copyJs) {
    from 'tmp'
    into 'build/resources/main/assets/journeymap/web/js'
    include 'journeymap.js'
}

task includeJars(type: Copy) {
    dependsOn configurations.includeInJar
    from {
        configurations.includeInJar.asFileTree.each {
            from(zipTree(it))
        }
        // Exclude the jar itself
        null
    }
    into file("${project.buildDir}/classes/main")
    include "journeymap/**"
}

task filter() {
    def subdir = new File("tmp")

    if( !subdir.exists() ) {
        subdir.mkdirs()
    }
}

task minifyJs(type: JavaExec, dependsOn: filter) {
    ant.java(jar:"libs/yuicompressor-2.4.7.jar",fork:true)
    {
        arg(value: "${srcWebDir}js/journeymap.js")
        arg(value: "-o")
        arg(value: "tmp/journeymap.js")
    }
}

task minifyCss(type: JavaExec, dependsOn: filter) {
    ant.java(jar:"libs/yuicompressor-2.4.7.jar",fork:true)
    {
        arg(value: "${srcWebDir}css/journeymap.css")
        arg(value: "-o")
        arg(value: "tmp/journeymap.css")
    }
}

task deleteNoRadar(type: Delete) {
    delete '${implSrc}NoRadar.java'
}

task deleteUnlimited(type: Delete) {
    delete '${implSrc}Unlimited.java'
}

task unlimitedJar(type: Jar, dependsOn: ['includeJars', 'copyCss', 'deleteNoRadar']) {
    version = "${version}-${project.unlimited}".toLowerCase()

    from(sourceSets.main.output) {
        duplicatesStrategy = 'exclude'
        exclude("journeymap/client/feature/impl/NoRadar.class")
    }

    from(sourceSets.main.resources.srcDirs) {
        include 'license.txt','mcmod.info'
        expand 'version': project.version,
                'date': getDate(),
                'mcversion': project.minecraft.version,
                'forgeversion': project.forge_version,
                'jmedition': project.unlimited,
                'apiversion': project.journeymap_api_version
    }

    manifest = project.manifest {
        from sharedManifest
    }
}

task unlimitedSolder(type: Zip, dependsOn: 'unlimitedJar') {
    baseName = "[solder]${archivesBaseName}"
    version = "${version}-${project.unlimited}".toLowerCase()
    from("build/libs") {
        into("mods")
        include("*unlimited.jar")
    }

}

task fairPlaySolder(type: Zip, dependsOn: 'fairPlayJar') {
    baseName = "[solder]${archivesBaseName}"
    version = "${version}-${project.fairplay}".toLowerCase()
    from("build/libs") {
        into("mods")
        include("*fairplay.jar")
    }
}

task fairPlayJar(type: Jar, dependsOn: ['includeJars', 'copyCss', 'deleteNoRadar', 'deleteUnlimited']) {
    version = "${version}-${project.fairplay}".toLowerCase()

    from(sourceSets.main.output) {
        exclude("journeymap/client/feature/impl/Unlimited.class")
        exclude("journeymap/client/feature/impl/NoRadar.class")
    }

    from(sourceSets.main.resources.srcDirs) {
        include 'license.txt','mcmod.info'
        expand 'version': project.version,
                'date': getDate(),
                'mcversion': project.minecraft.version,
                'forgeversion': project.forge_version,
                'jmedition': project.fairplay,
                'apiversion': project.journeymap_api_version
    }
}

artifacts.archives unlimitedJar, unlimitedSolder, fairPlayJar, fairPlaySolder

reobf {
    unlimitedJar {}
    fairPlayJar {}
}

task makePretty(type: Delete) {
    delete "build/libs/${archivesBaseName}-${version}.jar"
    delete '/tmp/'
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format(project.dateFormat)
    return formattedDate
}

build.dependsOn makePretty

// Automated upload to CurseForge for the win!
if (!project.hasProperty("curseForgeApiKey")) {
    ext.curseForgeApiKey = "notset"
}
curseforge {
    project {
        id = '32274'
        apiKey = "${curseForgeApiKey}"
        changelogType = 'html'
        releaseType = curse_release_type
        relations {
            embeddedLibrary 'journeymap-api'
            tool 'journeymap-tools'
        }

        mainArtifact(unlimitedJar) {
            displayName = "${archivesBaseName}-${version}"
            changelog = file('/doc/changelog.html')
        }

        addArtifact(fairPlayJar) {
        }

        addArtifact(fairPlaySolder) {
            changelog = file('/doc/solder.html')
        }

        addArtifact(unlimitedSolder) {
            changelog = file('/doc/solder.html')
        }
    }
}
