buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://oss.sonatype.org/content/groups/staging"
        }
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

ext {
    srcWebDir = "src/main/resources/assets/journeymap/web/"
    implSrc = "build/resources/java/journeymap/feature/impl/"
    sharedManifest = manifest {
        attributes = ["Implementation-Title": "JourneyMap",
                "Implementation-Version": project.version,
                "Implementation-URL": "www.curse.com/mc-mods/minecraft/journeymap-32274"]
    }
}

version = "${project.minecraft_version}-${project.jm_major}.${project.jm_minor}.${project.jm_micro}${project.jm_patch}"
group = "${project.group_id}"
archivesBaseName = "${project.mod_id}".toLowerCase()

dependencies {
    compile 'info.journeymap:journeymap-api:1.8.9-1.0'
}

minecraft {
    version = "${project.minecraft_version}-${project.forge_version}"
    mappings = "${project.snapshot}"
    runDir = "run"
    makeObfSourceJar = false

    replace "@JMVERSION@", "${project.jm_major}.${project.jm_minor}.${project.jm_micro}${project.jm_patch}"
    replace "@MCVERSION@", project.minecraft_version
    replace "@FORGEVERSION@", project.forge_version
    replace "@MAJOR@", project.jm_major
    replace "@MINOR@", project.jm_minor
    replace "@MICRO@", project.jm_micro
    replace "@PATCH@", project.jm_patch
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'license.txt'
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'date' : getDate()
    }
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'license.txt'
    }
}

task copyJs(type: Copy) {
    from 'tmp'
    into 'build/resources/main/assets/journeymap/web/css'
    include 'journeymap.css'
}

task copyCss(type: Copy, dependsOn: copyJs) {
    from 'tmp'
    into 'build/resources/main/assets/journeymap/web/js'
    include 'journeymap.js'
}

task filter() {
    def subdir = new File("tmp")

    if( !subdir.exists() ) {
        subdir.mkdirs()
    }
}

task minifyJs(type: JavaExec, dependsOn: filter) {
    ant.java(jar:"libs/yuicompressor-2.4.7.jar",fork:true)
    {
        arg(value: "${srcWebDir}js/journeymap.js")
        arg(value: "-o")
        arg(value: "tmp/journeymap.js")
    }
}

task minifyCss(type: JavaExec, dependsOn: filter) {
    ant.java(jar:"libs/yuicompressor-2.4.7.jar",fork:true)
    {
        arg(value: "${srcWebDir}css/journeymap.css")
        arg(value: "-o")
        arg(value: "tmp/journeymap.css")
    }
}

task deleteNoRadar(type: Delete) {
    delete '${implSrc}NoRadar.java'
}

task deleteUnlimited(type: Delete) {
    delete '${implSrc}Unlimited.java'
}

task unlimitedJar(type: Jar, dependsOn: ['copyCss', 'deleteNoRadar']) {
    version = "${version}-${project.unlimited}".toLowerCase()

    from(sourceSets.main.output) {
        duplicatesStrategy = 'exclude'
        exclude("journeymap/client/feature/impl/NoRadar.class")
    }
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'forgeversion' : project.forge_version, jmedition : project.unlimited
    }

    manifest = project.manifest {
        from sharedManifest
    }
}

task fairPlayJar(type: Jar, dependsOn: ['copyCss', 'deleteNoRadar', 'deleteUnlimited']) {
    version = "${version}-${project.fairPlay}".toLowerCase()

    from(sourceSets.main.output) {
        exclude("journeymap/client/feature/impl/Unlimited.class")
        exclude("journeymap/client/feature/impl/NoRadar.class")
    }
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'forgeversion' : project.forge_version, jmedition : project.fairPlay
    }
}

artifacts.archives unlimitedJar, fairPlayJar

reobf {
    unlimitedJar {}
    fairPlayJar {}
}

task makePretty(type: Delete) {
    delete "build/libs/${archivesBaseName}-${version}.jar"
    delete '/tmp/'
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format(project.dateFormat)
    return formattedDate
}

build.dependsOn makePretty