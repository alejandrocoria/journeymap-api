buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.0.8'
        classpath "com.eriwen:gradle-js-plugin:2.14.1"
        classpath 'com.eriwen:gradle-css-plugin:2.14.0'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'com.eriwen.gradle.js'
apply plugin: 'com.eriwen.gradle.css'

ext {
    srcWebDir = "src/main/resources/assets/journeymap/ui/"
    buildWebDir = "build/resources/main/assets/journeymap/ui/"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = "${project.minecraft_version}-${project.jm_major}.${project.jm_minor}.${project.jm_micro}${project.jm_patch}"
group = project.group_id
archivesBaseName = project.mod_id

repositories {
    // JourneyMap API releases are here
    mavenCentral()

    // JourneyMap API snapshots are here
    maven { url 'https://oss.sonatype.org/content/groups/public/' }
}

configurations {
    // custom config of jars that will be included in the journeymap jar
    includeInJar
}

configurations.all {
    // Check for snapshots more frequently than Gradle's default of 1 day. 0 = every build.
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile group: "info.journeymap", name: "journeymap-api", version: project.journeymap_api_version, changing: true
    //runtime group: "info.journeymap", name: "journeymap-api", version: project.journeymap_api_version, classifier: "examplemod", changing: true
    testCompile 'junit:junit:4.12'
    includeInJar "info.journeymap:journeymap-api:" + project.journeymap_api_version
}

minecraft {
    version = "${project.minecraft_version}-${project.forge_version}"
    mappings = project.mappings
    runDir = "run"
    makeObfSourceJar = false

    replace "@JMVERSION@", project.version
    replace "@MCVERSION@", project.minecraft_version
    replace "@FORGEVERSION@", project.forge_version
    replace "@MAJOR@", project.jm_major
    replace "@MINOR@", project.jm_minor
    replace "@MICRO@", project.jm_micro
    replace "@PATCH@", project.jm_patch
}

minifyJs {
    source = file("${srcWebDir}/js/journeymap.js")
    dest = ("${buildWebDir}/js/journeymap.js")
    doFirst {
        dest.parentFile.mkdirs()
        dest.delete()
    }
}

minifyCss {
    source = file("${srcWebDir}/css/journeymap.css")
    dest = file("${buildWebDir}/css/journeymap.css")
    yuicompressor {
        lineBreakPos = -1
    }
    doFirst {
        dest.parentFile.mkdirs()
        dest.delete()
    }
}

processResources() {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'license.txt','mcmod.info'
        expand 'version': project.version,
                'date': getDate(),
                'mcversion': project.minecraft.version,
                'forgeversion': project.forge_version,
                'apiversion': project.journeymap_api_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'license.txt'
    }
}

task processDocs(type: Copy) {
    // update docs
    from(file("/doc/")) {
        include '*.html'
        expand 'version': project.version,
                'date': getDate(),
                'mcversion': project.minecraft.version,
                'forgeversion': project.forge_version,
                'apiversion': project.journeymap_api_version
    }
    into 'build/doc'
}

task includeJars(type: Copy) {
    dependsOn configurations.includeInJar
    from {
        configurations.includeInJar.asFileTree.each {
            from(zipTree(it))
        }
        // Exclude the jar itself
        null
    }
    into file("${project.buildDir}/classes/main")
    include "journeymap/**"
}

/* Jar manifest */
jar {
    dependsOn 'processDocs', 'includeJars', 'minifyJs', 'minifyCss'
    manifest {
        attributes = [
                "Manifest-Version"      : "1.0",
                "Implementation-Title"  : "JourneyMap",
                "Implementation-Version": project.version,
                "Implementation-URL"    : "http://journeymap.info"
        ]
    }
}

task solderZip(type: Zip, dependsOn: 'jar') {
    baseName = "[solder]${archivesBaseName}"
    from("build/libs") {
        into("mods")
        include("*.jar")
    }

}

artifacts {
    archives jar
    archives solderZip
}

reobf {
    jar
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format(project.dateFormat)
    return formattedDate
}

// Automated upload to CurseForge for the win!
if (!project.hasProperty("curseForgeApiKey")) {
    ext.curseForgeApiKey = "notset"
}

curseforge {
    project {
        id = '32274'
        apiKey = "${curseForgeApiKey}"
        changelogType = 'html'
        releaseType = curse_release_type
        relations {
            embeddedLibrary 'journeymap-api'
            tool 'journeymap-tools'
        }

        mainArtifact(jar) {
            displayName = "${archivesBaseName}-${version}"
            changelog = file('/build/doc/changelog.html')
        }

        addArtifact(solderZip) {
            changelog = file('/build/doc/solder.html')
        }
    }
}

// Ensure build is done prior to cursegradle tasks
project.afterEvaluate {
    project.tasks.findAll { task -> task.name.startsWith('curseforge') && task.name != 'curseforge' }.each { projectTask ->
        projectTask.dependsOn build
    }
}

