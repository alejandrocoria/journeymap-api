buildscript {
    repositories {
        jcenter()

        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.0.9'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.61'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.jetbrains.kotlin.jvm'

ext {
    srcWebDir = "src/main/resources/assets/journeymap/ui/"
    buildWebDir = "build/resources/main/assets/journeymap/ui/"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = "${project.minecraft_version}-${project.jm_major}.${project.jm_minor}.${project.jm_micro}${project.jm_patch}"
group = project.group_id
archivesBaseName = project.mod_id

repositories {
    // JourneyMap API releases are here
    mavenCentral()

    // JourneyMap API snapshots are here
    maven {
        name = "journeymap"
        url = 'https://oss.sonatype.org/content/groups/public/'
    }

    maven {
        name = "chisel"
        url = "http://maven.tterrag.com/"
    }

    maven {
        name = "JourneyMap"
        url = "https://jm.gserv.me/repository/maven-snapshots/"
    }
}

configurations {
    // custom config of jars that will be included in the journeymap jar
    shade
}

configurations.all {
    // Check for snapshots more frequently than Gradle's default of 1 day. 0 = every build.
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile 'ar.com.hjg:pngj:2.1.0'
    compile 'com.sparkjava:spark-kotlin:1.0.0-alpha'
    compile group: 'info.journeymap', name: 'journeymap-api', version: project.journeymap_api_version, changing: true
    compile group: 'info.journeymap', name: 'webmap-client', version: project.journeymap_webmap_version, changing: true
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8'

    testCompile 'junit:junit:4.12'

    shade 'ar.com.hjg:pngj:2.1.0'
    shade 'com.sparkjava:spark-kotlin:1.0.0-alpha'
    shade group: 'info.journeymap', name: 'journeymap-api', version: project.journeymap_api_version, changing: true
    shade group: 'info.journeymap', name: 'webmap-client', version: project.journeymap_webmap_version, changing: true
    shade group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
    shade group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8'

    // Put other mods here as needed for debugging/testing
    compile fileTree(dir: 'lib', include: '*.jar')
}

minecraft {
    version = "${project.minecraft_version}-${project.forge_version}"
    mappings = project.mappings
    runDir = "run"
    makeObfSourceJar = false

    replace "@JMVERSION@", project.version
    replace "@MCVERSION@", project.minecraft_version
    replace "@FORGEVERSION@", project.forge_version
    replace "@MAJOR@", project.jm_major
    replace "@MINOR@", project.jm_minor
    replace "@MICRO@", project.jm_micro
    replace "@PATCH@", project.jm_patch
}

reobf {
    shadowJar {
        mappingType = 'SEARGE'  // Warning in IDEA is erroneous, don't worry about it
    }
}

shadowJar {
    minimize {
        // API has utility classes that must be included
        exclude(dependency("info.journeymap:.*:.*"))
    }

    archiveName = "${baseName}-${version}.${extension}"

    relocate "ar.com", "info.journeymap.shaded.ar.com"
    relocate "com.sparkjava", "info.journeymap.shaded.com.sparkjava"
    relocate "javax.servlet", "info.journeymap.shaded.org.javax.servlet"
    relocate "org.intellij", "info.journeymap.shaded.org.intellij"
    relocate "org.jetbrains", "info.journeymap.shaded.org.jetbrains"
    relocate "org.slf4j", "info.journeymap.shaded.org.slf4j"

    relocate "kotlin", "info.journeymap.shaded.kotlin.kotlin"
    relocate "spark", "info.journeymap.shaded.kotlin.spark"
}

processResources() {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'license.txt', 'mcmod.info'
        expand 'version': project.version,
                'date': getDate(),
                'mcversion': project.minecraft.version,
                'forgeversion': project.forge_version,
                'apiversion': project.journeymap_api_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'license.txt'
    }
    // Process AT files
    rename '(.+_at.cfg)', 'META-INF/$1'
}

task processDocs(type: Copy) {
    // update docs
    from(file("/doc/")) {
        include '*.html'
        expand 'version': project.version,
                'date': getDate(),
                'mcversion': project.minecraft.version,
                'forgeversion': project.forge_version,
                'apiversion': project.journeymap_api_version
    }
    into 'build/doc'
}

tasks.build.dependsOn reobfShadowJar

clean.doFirst {
    // Remove the Webpack bundled assets as part of the clean task
    delete "$projectDir/src/main/resources/assets/journeymap/web/"
}

/* Jar manifest */
jar {
    classifier = 'slim'
    dependsOn 'processDocs'
    
    manifest {
        attributes = [
            "Manifest-Version"      : "1.0",
            "Implementation-Title"  : "JourneyMap",
            "Implementation-Version": project.version,
            "Implementation-URL"    : "http://journeymap.info",
            "FMLAT"                 : "journeymap_at.cfg"
        ]
    }
}

task solderZip(type: Zip, dependsOn: 'jar') {
    baseName = "[solder]${archivesBaseName}"
    from("build/libs") {
        into("mods")
        include("${archivesBaseName}-${version}.jar")
        exclude("*-slim.jar")
    }
}

artifacts {
    archives shadowJar
    archives solderZip
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format(project.dateFormat)
    return formattedDate
}

// Automated upload to CurseForge for the win!
if (!project.hasProperty("curseForgeApiKey")) {
    ext.curseForgeApiKey = "notset"
}

curseforge {
    project {
        id = '32274'
        apiKey = "${curseForgeApiKey}"
        changelogType = 'html'
        releaseType = curse_release_type

        relations {
            tool 'journeymap-tools'
        }

        mainArtifact(shadowJar) {
            displayName = "${archivesBaseName}-${version}"
            changelog = file('/build/doc/changelog.html')
        }

        addArtifact(solderZip) {
            changelog = file('/build/doc/solder.html')
        }
    }
}

// Ensure build is done prior to cursegradle tasks
project.afterEvaluate {
    project.tasks.findAll { task -> task.name.startsWith('curseforge') && task.name != 'curseforge' }.each { projectTask ->
        projectTask.dependsOn build
    }
}

